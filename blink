#!/usr/bin/env bash
#!/bin/bash
# terminal based speedreading tester
# links that helped me:
#  - https://superuser.com/q/835824/597763
# code review:
#  - https://codereview.stackexchange.com/questions/230256/bash-script-for-speedreading-training

# fall back on defaults
BLINK_DIGITS=${BLINK_DIGITS:-5}
BLINK_INTERVAL=${BLINK_INTERVAL:-2e-1}
BLINK_QUIT=${BLINK_QUIT:-q}
BLINK_INCREMENT_DIGITS=${BLINK_INCREMENT_DIGITS:-l}
BLINK_DECREMENT_DIGITS=${BLINK_DECREMENT_DIGITS:-h}
BLINK_DECREMENT_TIME=${BLINK_DECREMENT_TIME:-j}
BLINK_INCREMENT_TIME=${BLINK_INCREMENT_TIME:-k}

# define functions
generate_number() {
  for (( i = 0; i < BLINK_DIGITS; ++i )); do
    gen+=$(( RANDOM % 10 ))
  done
  echo $gen
}

center_vertically() {
  print_header
  eval "printf '\n%.0s' {1..$(( LINES/2 ))}"
}

center_horizontally() {
  print_spaces $(( (COLUMNS - ${#1})/2 ))
}

print_spaces() {
  printf "%${1}s" ""
}

print_header() {
  # prepare left part of first two lines (I can't use here-strings/documents since
  # some computation has to be done with the length of the strings, provided I want to flush
  # some text to the right)
  selected_time_interval="Time interval: $BLINK_INTERVAL seconds ([$BLINK_DECREMENT_TIME] reduces, [$BLINK_INCREMENT_TIME] increases)"
  string_length="String length: $BLINK_DIGITS digits ([$BLINK_DECREMENT_DIGITS] removes digit, [$BLINK_INCREMENT_DIGITS] adds digit)"

  # compute scores and align them to the right
  (( trim = ${#right} - ${#wrong} ))
  (( trim < 0 )) &&  score_plus="Score: ✓ $(print_spaces "${trim#-}")$right" ||  score_plus="Score: ✓ $right"
  (( trim > 0 )) && score_minus="       ✗ $(print_spaces "${trim#-}")$wrong" || score_minus="       ✗ $wrong"
  (( max_length = ${#score_plus} > ${#score_minus} ? ${#score_plus} : ${#score_minus} ))

  # fill space in between and print the two lines
  printf "%s%$(( COLUMNS - ${#selected_time_interval} - max_length ))s%s\n" "$selected_time_interval" "" "$score_plus"
  printf "%s%$(( COLUMNS - ${#string_length} - max_length ))s%s" "$string_length"  "" "$score_minus"
  echo "[$BLINK_QUIT] quits, all other keys regenerate the number"
}

redraw_screen() {
  clear
  center_vertically
  center_horizontally "$number"
}

decrement_time() {
  adjust_time -1
}
increment_time() {
  adjust_time 1
}

adjust_time() {
  BLINK_INTERVAL=$(awk -v step="$BLINK_INTERVAL" -v dir="$1" 'BEGIN { printf "%.2g", step*(10/9)^dir }')
}

quit() {
  # clear screen and exit
  clear
  exit 0
}

# don't use undefined variables
set -u

# initialize score
right=0
wrong=0

BLINK_INTERVAL=$(awk -v step="$BLINK_INTERVAL" -v dir=0 'BEGIN { printf "%.2g", step*(10/9)^dir }')

# main loop
while true; do
  # generate number
  number=$(generate_number)

  # show number for short time
  redraw_screen
  printf '%s' "$number"
  sleep "$BLINK_INTERVAL"

  # erase the number (go back, overwrite with spaces, go back again)
  eval "printf '\b%.0s' {1..${#number}}"
  eval "printf ' %.0s'  {1..${#number}}"
  eval "printf '\b%.0s' {1..${#number}}"

  read -rn 1 first_char
  case $first_char in
    "$BLINK_QUIT" )
      quit
      ;;
    "$BLINK_DECREMENT_DIGITS" )
      (( BLINK_DIGITS > 1 )) && (( BLINK_DIGITS-- ))
      ;;
    "$BLINK_INCREMENT_DIGITS" )
      (( BLINK_DIGITS < COLUMNS - 1 )) && (( BLINK_DIGITS++ ))
      ;;
    "$BLINK_DECREMENT_TIME" )
      decrement_time
      ;;
    "$BLINK_INCREMENT_TIME" )
      increment_time
      ;;
    [0-9] )
      #redraw_screen
      # erase $first_char
      printf '\b%.0s' ""
      echo -ne "\r"
      # use $first_char as a default to have it printed again
      # the leading space is to allow backspacing on the first digit
      # without the all leading space being erased all together
      read -rp "$(center_horizontally "$number")" -i "$first_char" -e answer
      (( answer == number ? right++ : wrong++ ))
      ;;
  esac

done && clear
exit
